// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gh

import (
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			CreateRepoFunc: func(owner string, name string, access Visibility) (*Repository, error) {
//				panic("mock out the CreateRepo method")
//			},
//			CurrentRemoteFunc: func() (*Repository, error) {
//				panic("mock out the CurrentRemote method")
//			},
//			CurrentUserFunc: func() (*User, error) {
//				panic("mock out the CurrentUser method")
//			},
//			GetAccountFunc: func(name string) (*Account, error) {
//				panic("mock out the GetAccount method")
//			},
//			GetRepoFunc: func(name string) (*Repository, error) {
//				panic("mock out the GetRepo method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// CreateRepoFunc mocks the CreateRepo method.
	CreateRepoFunc func(owner string, name string, access Visibility) (*Repository, error)

	// CurrentRemoteFunc mocks the CurrentRemote method.
	CurrentRemoteFunc func() (*Repository, error)

	// CurrentUserFunc mocks the CurrentUser method.
	CurrentUserFunc func() (*User, error)

	// GetAccountFunc mocks the GetAccount method.
	GetAccountFunc func(name string) (*Account, error)

	// GetRepoFunc mocks the GetRepo method.
	GetRepoFunc func(name string) (*Repository, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRepo holds details about calls to the CreateRepo method.
		CreateRepo []struct {
			// Owner is the owner argument value.
			Owner string
			// Name is the name argument value.
			Name string
			// Access is the access argument value.
			Access Visibility
		}
		// CurrentRemote holds details about calls to the CurrentRemote method.
		CurrentRemote []struct {
		}
		// CurrentUser holds details about calls to the CurrentUser method.
		CurrentUser []struct {
		}
		// GetAccount holds details about calls to the GetAccount method.
		GetAccount []struct {
			// Name is the name argument value.
			Name string
		}
		// GetRepo holds details about calls to the GetRepo method.
		GetRepo []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockCreateRepo    sync.RWMutex
	lockCurrentRemote sync.RWMutex
	lockCurrentUser   sync.RWMutex
	lockGetAccount    sync.RWMutex
	lockGetRepo       sync.RWMutex
}

// CreateRepo calls CreateRepoFunc.
func (mock *ClientMock) CreateRepo(owner string, name string, access Visibility) (*Repository, error) {
	if mock.CreateRepoFunc == nil {
		panic("ClientMock.CreateRepoFunc: method is nil but Client.CreateRepo was just called")
	}
	callInfo := struct {
		Owner  string
		Name   string
		Access Visibility
	}{
		Owner:  owner,
		Name:   name,
		Access: access,
	}
	mock.lockCreateRepo.Lock()
	mock.calls.CreateRepo = append(mock.calls.CreateRepo, callInfo)
	mock.lockCreateRepo.Unlock()
	return mock.CreateRepoFunc(owner, name, access)
}

// CreateRepoCalls gets all the calls that were made to CreateRepo.
// Check the length with:
//
//	len(mockedClient.CreateRepoCalls())
func (mock *ClientMock) CreateRepoCalls() []struct {
	Owner  string
	Name   string
	Access Visibility
} {
	var calls []struct {
		Owner  string
		Name   string
		Access Visibility
	}
	mock.lockCreateRepo.RLock()
	calls = mock.calls.CreateRepo
	mock.lockCreateRepo.RUnlock()
	return calls
}

// CurrentRemote calls CurrentRemoteFunc.
func (mock *ClientMock) CurrentRemote() (*Repository, error) {
	if mock.CurrentRemoteFunc == nil {
		panic("ClientMock.CurrentRemoteFunc: method is nil but Client.CurrentRemote was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCurrentRemote.Lock()
	mock.calls.CurrentRemote = append(mock.calls.CurrentRemote, callInfo)
	mock.lockCurrentRemote.Unlock()
	return mock.CurrentRemoteFunc()
}

// CurrentRemoteCalls gets all the calls that were made to CurrentRemote.
// Check the length with:
//
//	len(mockedClient.CurrentRemoteCalls())
func (mock *ClientMock) CurrentRemoteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCurrentRemote.RLock()
	calls = mock.calls.CurrentRemote
	mock.lockCurrentRemote.RUnlock()
	return calls
}

// CurrentUser calls CurrentUserFunc.
func (mock *ClientMock) CurrentUser() (*User, error) {
	if mock.CurrentUserFunc == nil {
		panic("ClientMock.CurrentUserFunc: method is nil but Client.CurrentUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCurrentUser.Lock()
	mock.calls.CurrentUser = append(mock.calls.CurrentUser, callInfo)
	mock.lockCurrentUser.Unlock()
	return mock.CurrentUserFunc()
}

// CurrentUserCalls gets all the calls that were made to CurrentUser.
// Check the length with:
//
//	len(mockedClient.CurrentUserCalls())
func (mock *ClientMock) CurrentUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCurrentUser.RLock()
	calls = mock.calls.CurrentUser
	mock.lockCurrentUser.RUnlock()
	return calls
}

// GetAccount calls GetAccountFunc.
func (mock *ClientMock) GetAccount(name string) (*Account, error) {
	if mock.GetAccountFunc == nil {
		panic("ClientMock.GetAccountFunc: method is nil but Client.GetAccount was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetAccount.Lock()
	mock.calls.GetAccount = append(mock.calls.GetAccount, callInfo)
	mock.lockGetAccount.Unlock()
	return mock.GetAccountFunc(name)
}

// GetAccountCalls gets all the calls that were made to GetAccount.
// Check the length with:
//
//	len(mockedClient.GetAccountCalls())
func (mock *ClientMock) GetAccountCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetAccount.RLock()
	calls = mock.calls.GetAccount
	mock.lockGetAccount.RUnlock()
	return calls
}

// GetRepo calls GetRepoFunc.
func (mock *ClientMock) GetRepo(name string) (*Repository, error) {
	if mock.GetRepoFunc == nil {
		panic("ClientMock.GetRepoFunc: method is nil but Client.GetRepo was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetRepo.Lock()
	mock.calls.GetRepo = append(mock.calls.GetRepo, callInfo)
	mock.lockGetRepo.Unlock()
	return mock.GetRepoFunc(name)
}

// GetRepoCalls gets all the calls that were made to GetRepo.
// Check the length with:
//
//	len(mockedClient.GetRepoCalls())
func (mock *ClientMock) GetRepoCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetRepo.RLock()
	calls = mock.calls.GetRepo
	mock.lockGetRepo.RUnlock()
	return calls
}
